from processor import *
import datetime
import requests
import json
import io
import shutil

# define our control codes here for easy use later
ESCAPE = chr(27)
DOUBLE_HEIGHT = ESCAPE + chr(77)
SET_BACKGROUND = ESCAPE + chr(93)
BLUESKY_BUTTERFLY = chr(0x63) + chr(0x2c) + chr(0x33)
text_colours = {"red" : 65, "green" : 66, "yellow" : 67 , "blue" : 68, "magenta" : 69, "cyan" : 70, "white" : 71}
mosaic_colours = {"red" : 81, "green" : 82, "yellow" : 83, "blue" : 84, "magenta" : 85, "cyan" : 86, "white" : 87}

def write_post_info(file, line_num, username, timestamp, config):
    string = "OL," + str(line_num) + ","
    string += "`" * (36-len(timestamp)-len(username))
    string += ESCAPE + chr(text_colours[config["username_colour"]]) + username
    string += ESCAPE + chr(text_colours["white"]) + "|"
    string += ESCAPE + chr(text_colours[config["timestamp_colour"]]) + timestamp
    string += "\r\n"
    file.write(string)

def write_post_line(file, line_num, line, config):
    string = "OL," + str(line_num) + ","
    string += ESCAPE + chr(text_colours[config["post_colour"]]) + line
    string += "\r\n"
    file.write(string)

def write_post_replying(file, line_num, username, config):
    string = "OL," + str(line_num) + ","
    string += "Replying to" + ESCAPE + chr(text_colours[config["username_colour"]]) + username[:27] + ":"
    string += "\r\n"
    file.write(string)

def write_header(file, subpage, max_subpages, config): # write a header for the page and pop a nice banner at the top
    page_title = config["page_title"] + " " + "{:02d}/{:02d}".format(subpage, max_subpages)
    logo_spacer = " " * (39 - (4 + len(page_title) + 5))
    if subpage == 1: # we only want these lines once
        file.write("DE,Autogenerated by Teletext-Twitter\r\n")
        if max_subpages > 1:
            file.write("PS,C000\r\n")
        else:
            file.write("PS,8008\r\n")
        file.write("CT," + str(config["cycle_time"]) + ",C\r\n")
    file.write("PN," + str(config["page_number"]) + "{:02}\r\n".format(subpage))
    file.write("SC,00" + "{:02}\r\n".format(subpage))
    file.write("FL," + config["fastext"] + "\r\n")
    
    if "packet_28" in config.keys():
        file.write("OL,28,"+config["packet_28"]+"\r\n") # page enhancement packet
    file.write("OL,1," + ESCAPE + chr(text_colours[config["header_colour"]]) + SET_BACKGROUND +
               DOUBLE_HEIGHT + ESCAPE + chr(text_colours[config["page_title_colour"]]) + page_title +
               logo_spacer + ESCAPE + chr(mosaic_colours["blue"]) + BLUESKY_BUTTERFLY + "\r\n")
    file.write("OL,3," + ESCAPE + chr(mosaic_colours[config["header_separator"]]) + (chr(35) * 39) + "\r\n")

def write_enhancements(file, enhancements):
    for p in range(15): # up to 15 enhancement packets per subpage
        packet = "OL,26," + chr(0x40 + p) # first byte is designation code
        for e in range(13): # up to 13 triplets per enhancement packet
            if len(enhancements) > p*13+e:
                # combine parts of enhancement data into an 18 byte triplet, then slice it up into three 6 byte values to write to the row with bit 6 set
                triplet = enhancements[p*13+e][0] | ((enhancements[p*13+e][1]) << 6) | ((enhancements[p*13+e][2]) << 11)
                packet+=chr(0x40+(triplet&0x3F))+chr(0x40+((triplet>>6)&0x3F))+chr(0x40+((triplet>>12)&0x3F))
            elif e == 0:
                # TODO: generate packet of terminators if previous packet is full.
                return
            else:
                packet+=chr(0x7f)+chr(0x7f)+chr(0x7f)
        file.write(packet+"\r\n")

def write_posts(count, config, query):
    response = requests.get(url="https://api.bsky.app/xrpc/app.bsky.feed.searchPosts?limit={}&q={}".format(count, query))
    statuses = json.loads(response.text)["posts"]

    file = io.StringIO() # buffer to build our file
    subpage = 1

    # pre-calculate how many subpages we're going to
    # write - is there a better way of doing this?
    line_position = 4
    for status in statuses:
        if "facets" in status["record"]:
            postbytes = bytearray(status["record"]["text"], "utf8")
            for facet in status["record"]["facets"]:
                if facet["features"][0]["$type"] == "app.bsky.richtext.facet#link":
                    facetbytes = bytearray(status["record"]["text"], "utf8")
                    postbytes = postbytes.replace(facetbytes[facet["index"]["byteStart"]:facet["index"]["byteEnd"]],bytes("<LINK>", encoding="utf8"))
            post_text = postbytes.decode("utf8")
        else:
            post_text = status["record"]["text"]
        
        if "embed" in status["record"]:
            if status["record"]["embed"]["$type"] == "app.bsky.embed.images":
                post_text += " <IMAGE>"
            if status["record"]["embed"]["$type"] == "app.bsky.embed.video":
                post_text += " <VIDEO>"
        
        post_text = post_remove_emojis(post_text, config)
        post_text = post_highlight_query(post_text, query, config)
        post_text = charsub(post_text)
        post_text = textwrap.wrap(post_text, 38)
        post_length = len(post_text) + 1
        
        if "reply" in status["record"]:
            post_length = post_length + 1 # add extra line for reply string
        
        if (line_position + post_length) > 23:
            subpage += 1
            if subpage > 99:
                break # reached subpage limit - no point checking the rest
            line_position = 4
        line_position += post_length
    max_subpages = min(subpage, 99)
    
    # reset everything for the actual writing
    subpage = 1
    write_header(file, subpage, max_subpages, config)
    line_position = 4
    subpage_enhancements = []
    
    if "logo_invocation" in config.keys():
        subpage_enhancements.extend(config["logo_invocation"])

    for status in statuses: # iterate through our responses
        post_text = status["record"]["text"]
        if "facets" in status["record"]:
            postbytes = bytearray(status["record"]["text"], "utf8")
            for facet in status["record"]["facets"]:
                if facet["features"][0]["$type"] == "app.bsky.richtext.facet#link":
                    facetbytes = bytearray(status["record"]["text"], "utf8")
                    postbytes = postbytes.replace(facetbytes[facet["index"]["byteStart"]:facet["index"]["byteEnd"]],bytes("<LINK>", encoding="utf8"))
            post_text = postbytes.decode("utf8")
        else:
            post_text = status["record"]["text"]
        
        if "embed" in status["record"]:
            if status["record"]["embed"]["$type"] == "app.bsky.embed.images":
                post_text += " <IMAGE>"
            if status["record"]["embed"]["$type"] == "app.bsky.embed.video":
                post_text += " <VIDEO>"
        
        post_text = post_remove_emojis(post_text, config)
        post_text = post_highlight_query(post_text, query, config)
        post_text = charsub(post_text)
        post_text = textwrap.wrap(post_text, 38) # make sure our lines fit on the screen
        post_time = datetime.datetime.fromisoformat(status["record"]["createdAt"])
        post_human_time = post_time.strftime("%d-%b-%Y %H:%S") # reformat time/date output
        post_username = charsub(status["author"]["displayName"])[:18]

        post_length = len(post_text) + 1 # how long is our next post? (including info line)
        if (line_position + post_length) > 23: # are we about to go over the page?
            file.write("OL,24,"+ config["footer"] +"\r\n")
            if subpage_enhancements:
                write_enhancements(file, subpage_enhancements)
            subpage += 1 # start a new page
            subpage_enhancements = []
            if "logo_invocation" in config.keys():
                subpage_enhancements.extend(config["logo_invocation"])
            if subpage > 99:
                return # reached subpage limit - dump the rest
            write_header(file, subpage, max_subpages, config)
            line_position = 4 # and reset our cursor
        post_username_enhanced = charenhance(post_username,(37-len(post_human_time)-len(post_username)))
        if post_username_enhanced[1]:
            subpage_enhancements.append([line_position+40,4,0]) # active position to start of row
            subpage_enhancements += post_username_enhanced[1]
        write_post_info(file, line_position, post_username_enhanced[0], post_human_time, config)
        line_position += 1
        
        if "reply" in status["record"]:
            response = requests.get(url="https://api.bsky.app/xrpc/app.bsky.feed.getPostThread?depth=0&uri={}".format(status["record"]["reply"]["parent"]["uri"]))
            j = json.loads(response.text)
            if "thread" in j:
                reply_username = j["thread"]["post"]["author"]["displayName"]
                if reply_username == "":
                    reply_username = j["thread"]["post"]["author"]["handle"]
                reply_username_enhanced = charenhance(reply_username, 13)
                if reply_username_enhanced[1]:
                    subpage_enhancements.append([line_position+40,4,0]) # active position to start of row
                    subpage_enhancements += reply_username_enhanced[1]
                write_post_replying(file, line_position, reply_username_enhanced[0], config)
                line_position += 1
        
        for line in post_text:
            post_text_line = charenhance(line,1)
            if post_text_line[1]:
                subpage_enhancements.append([line_position+40,4,0]) # active position to start of row
                subpage_enhancements += post_text_line[1]
            write_post_line(file, line_position, post_text_line[0], config)
            line_position += 1

    # finish the last subpage
    file.write("OL,24,"+ config["footer"] +"\r\n")
    if subpage_enhancements:
        write_enhancements(file, subpage_enhancements)

    filename = config["tti_path"] + "P" + str(config["page_number"]) + ".tti"
    try:
        with open(filename, "r+", newline="") as f: # open existing file
            file.seek(0)
            if f.read() != file.read(): # page has changed
                print("File updated")
                f.seek(0)
                file.seek(0)
                shutil.copyfileobj(file, f)
                f.truncate()
    except OSError:
        with open(filename, "w+", newline="") as f: # create new file
            print("File created")
            file.seek(0)
            shutil.copyfileobj(file, f)
    